<?xml version="1.0" encoding="UTF-8"?>
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
    ">
    <!-- Spring的配置文件，这里主要配置和业务逻辑有关的 -->   
    <!-- ================================================================数据源================== -->
    <!-- 扫描  -->
    <context:component-scan base-package="com.seven">
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>   
    </context:component-scan>
        
    <context:property-placeholder location="classpath:jdbc.properties"/>    
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    	<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
    	<property name="driverClass" value="${jdbc.driverClass}"></property>
    	<property name="user" value="${jdbc.user}"></property>
    	<property name="password" value="${jdbc.password}"></property>
    </bean>
    <!-- ======================================================================================== -->
     
    <!-- =======================配置和mybatis的整合    定义Mybatis的SqlSessionFactory================-->
    
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		
		<!-- 指定mybatis全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- 定义数据源 -->
		<property name="dataSource" ref="pooledDataSource"/>
		<!-- 扫描mappers目录以及子目录下的所有xml文件 -->
  		<!--<property name="mapperLocations" value="classpath:mapper/*.xml" /> &lt;!&ndash; classpath:mappers/**/*.xml &ndash;&gt;-->

	</bean>
	
	<!-- 定义Mapper接口扫描器   配置扫描器，将mybatis接口的实现加入到ioc容器中-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao的接口的实现，将加入到ioc容器中 -->
	    <property name="basePackage" value="com.seven.dao" />
	</bean>
	<!-- =========================================================================================-->
	
	<!-- ===================配置一个可以批量执行的sqlSession====================================== -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	
	<!-- =========================================================================================-->
	<!-- ==============================事务控制的配置   定义事务管理器============================== --> 	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制数据源 -->
		<property name="dataSource" ref="pooledDataSource"/>
	</bean>
	
	<!-- 开启基于注解的事务，使用XML配置形式的事务（必要都使用配置式） -->
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.seven.service..*(..))" />
		<!--将定义好的事务处理策略应用到上述的切入点 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	
	<!-- 配置事务增强，事务如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		<!-- 所有方法都是事务方法 -->
		<tx:method name="*"/>
		<!-- 以get开始的所有方法 -->
		<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!-- ======================================================================================= --> 
</beans>